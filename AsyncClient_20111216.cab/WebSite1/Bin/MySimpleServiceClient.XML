<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MySimpleServiceClient</name>
    </assembly>
    <members>
        <member name="T:MySimpleServiceClient.MyHttpClient`2">
            <summary>
            【调用我的服务框架的工具类】
            对异步发送HTTP请求全过程的包装类，
            按IAsyncResult接口要求提供BeginSendHttpRequest/EndSendHttpRequest方法（一次回调）
            </summary>
            <typeparam name="TIn"></typeparam>
            <typeparam name="TOut"></typeparam>
        </member>
        <member name="F:MySimpleServiceClient.MyHttpClient`2.UserData">
            <summary>
            用于保存额外的用户数据。
            </summary>
        </member>
        <member name="M:MySimpleServiceClient.MyHttpClient`2.BeginSendHttpRequest(System.String,`0,System.AsyncCallback,System.Object)">
            <summary>
            开始【异步】调用一个服务方法。获取结果需要调用EndSendHttpRequest方法。
            </summary>
            <param name="url"></param>
            <param name="input"></param>
            <param name="cb"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:MySimpleServiceClient.MyHttpClient`2.EndSendHttpRequest(System.IAsyncResult)">
            <summary>
            结束【异步】调用，返回服务方法的结果。
            如果有异常发生，也会在这个方法中重新抛出。
            </summary>
            <param name="ar"></param>
            <returns></returns>
        </member>
        <member name="M:MySimpleServiceClient.MyHttpAsyncResult.SetCompleted(System.Exception,System.Object)">
            <summary>
            这个方法肯定会被回调线程中的SendHttpRequestCallback方法调用，
            以来通知调用线程回调结束。因为异步调用结束必须得调用SendHttpRequestCallback方法
            
            </summary>
            <param name="ex"></param>
            <param name="result"></param>
        </member>
        <member name="M:MySimpleServiceClient.MyHttpAsyncResult.WaitForCompletion">
            <summary>
            加入这个方法是为了防止调用线程在调用BeginXXX方法后立即调用EndXXX方法
            以阻塞调用线程的运行，如果异步没有完成
            </summary>
        </member>
        <member name="T:MySimpleServiceClient.MyAysncClient`2">
            <summary>
            【调用我的服务框架的工具类】
            我的异步调用客户端封装类
            </summary>
            <typeparam name="TIn"></typeparam>
            <typeparam name="TOut"></typeparam>
        </member>
        <member name="F:MySimpleServiceClient.MyAysncClient`2.UserData">
            <summary>
            用于保存额外的用户数据。
            </summary>
        </member>
        <member name="M:MySimpleServiceClient.MyAysncClient`2.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:MySimpleServiceClient.MyAysncClient`2.#ctor(System.String,System.Int32)">
            <summary>
            构造方法
            </summary>
            <param name="url"></param>
            <param name="timeoutMilliseconds"></param>
        </member>
        <member name="M:MySimpleServiceClient.MyAysncClient`2.CallAysnc(`0,System.Object)">
            <summary>
            开始以【异步】方式调用服务方法。当异步调用完成或者超时，或者发生异常时，将由事件OnCallCompleted通知。
            </summary>
            <param name="input"></param>
            <param name="state"></param>
        </member>
        <member name="P:MySimpleServiceClient.MyAysncClient`2.IsBusy">
            <summary>
            当前客户端是否在异步调用中。
            </summary>
        </member>
        <member name="E:MySimpleServiceClient.MyAysncClient`2.OnCallCompleted">
            <summary>
            异步调用完成后的通知事件
            </summary>
        </member>
        <member name="T:MySimpleServiceClient.MyAysncClient`2.CallCompletedEventArgs">
            <summary>
            调用完成后的事件参数类。它包含调用的结果，以及异常信息。
            </summary>
        </member>
        <member name="M:MySimpleServiceClient.MyAysncClient`2.CallCompletedEventArgs.#ctor(`1,System.Exception,System.Boolean,System.Object)">
            <summary>
            构造方法
            </summary>
            <param name="result"></param>
            <param name="e"></param>
            <param name="canceled"></param>
            <param name="state"></param>
        </member>
        <member name="P:MySimpleServiceClient.MyAysncClient`2.CallCompletedEventArgs.Result">
            <summary>
            异步调用的返回结果
            </summary>
        </member>
        <member name="T:MySimpleServiceClient.MyAysncClient`2.CallCompletedEventHandler">
            <summary>
            异步调用完成后的通知事件处理器（委托定义）
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:MySimpleServiceClient.MyAysncClient`2.MyAysncClientTimerParam">
            <summary>
            用于超时的回调参数
            </summary>
        </member>
        <member name="T:MySimpleServiceClient.DebugUtils">
            <summary>
            用于调试时的一些工具方法
            </summary>
        </member>
        <member name="M:MySimpleServiceClient.DebugUtils.GetStackTrace">
            <summary>
            显示当前方法为止的调用线程调用堆栈。
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySimpleServiceClient.DebugUtils.GetStackTrace(System.Int32)">
            <summary>
            显示当前线程的调用堆栈，并跳过一些靠前的堆栈。
            </summary>
            <param name="skip"></param>
            <returns></returns>
        </member>
        <member name="T:MySimpleServiceClient.HttpWebRequestHelper">
            <summary>
            【调用我的服务框架的工具类】
            专用于发送HTTP请求的工具类的【简化版本】，只能处理输入和输出都是字符串的场景。
            说明：如果需要 自定义HTTP消息头或者提供对Cookie的支持，请处理事件OnCreateHttpWebRequest
            </summary>
        </member>
        <member name="M:MySimpleServiceClient.HttpWebRequestHelper.SendHttpRequest(System.String,System.String)">
            <summary>
            【同步方式】简单地调用一个服务方法，此服务方法的输入输出都是字符串
            </summary>
            <param name="url"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:MySimpleServiceClient.HttpWebRequestHelper.SendHttpRequestAsync(System.String,System.String,System.Action{System.String,System.String,System.Exception,System.Object},System.Object)">
            <summary>
            【异步方式】简单地调用一个服务方法，此服务方法的输入输出都是字符串
            </summary>
            <param name="url"></param>
            <param name="input"></param>
            <param name="callback"></param>
            <param name="state"></param>
        </member>
        <member name="M:MySimpleServiceClient.HttpWebRequestHelper.CreateHttpWebRequest(System.String)">
            <summary>
            使用指定的URL，创建一个HttpWebRequest对象。
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:MySimpleServiceClient.HttpWebRequestHelper.CreateHttpWebRequest(System.String,System.String)">
            <summary>
            使用指定的URL以及数据的序列化格式，创建一个HttpWebRequest对象。
            </summary>
            <param name="url"></param>
            <param name="serializerFormat">序列化格式消息头。可以传入null 表示不使用序列化。</param>
            <returns></returns>
        </member>
        <member name="M:MySimpleServiceClient.HttpWebRequestHelper.ReadResponse(System.Net.HttpWebResponse)">
            <summary>
            读取响应内容。
            </summary>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:MySimpleServiceClient.HttpWebRequestHelper.SimpleReadWebExceptionText(System.Net.WebException)">
            <summary>
            读取异常中的服务器响应内容。方法仅仅简单地读取内容，不做其它处理。
            </summary>
            <param name="wex"></param>
            <returns></returns>
        </member>
        <member name="M:MySimpleServiceClient.HttpWebRequestHelper.HttpGet(System.String)">
            <summary>
            发送一个HTTP GET请求。【就是简单地发送请求，模拟浏览器行为】
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:MySimpleServiceClient.HttpWebRequestHelper.HttpPost(System.String,System.String)">
            <summary>
            发送一个HTTP POST请求。【就是简单地发送请求，模拟浏览器行为】
            </summary>
            <param name="url"></param>
            <param name="postData"></param>
            <returns></returns>
        </member>
        <member name="E:MySimpleServiceClient.HttpWebRequestHelper.OnCreateHttpWebRequest">
            <summary>
            在调用CreateHttpWebRequest即将结束时引发的事件，用于自定义HTTP消息头或者提供对Cookie的支持。
            </summary>
        </member>
        <member name="T:MySimpleServiceClient.CreateHttpWebRequestHandler">
            <summary>
            创建HttpWebRequest之后的事件处理器。
            </summary>
            <param name="request"></param>
        </member>
        <member name="T:MySimpleServiceClient.HttpWebRequestHelperOption">
            <summary>
            一些与HttpWebRequest相关的参数，它对整个类库有效。
            </summary>
        </member>
        <member name="F:MySimpleServiceClient.HttpWebRequestHelperOption.DefaultEncoding">
            <summary>
            默认的字符编码方式
            </summary>
        </member>
        <member name="F:MySimpleServiceClient.HttpWebRequestHelperOption.IsUseDefaultCredentials">
            <summary>
            每次发送HTTP请求时，是否要使用当前的登录信息。
            注意：这个参数与线程相关，只对设置过它的线程有效。
            </summary>
        </member>
        <member name="T:MySimpleServiceClient.HttpWebRequestHelper`2">
            <summary>
            【调用我的服务框架的工具类】
            工具提供二个方法用于发起同步请求和异步请求：SendHttpRequest， SendHttpRequestAsync
            考虑到参数较少，调用简单，我将此类实现为静态类，不提供任何public数据成员。
            </summary>
            <typeparam name="TIn"></typeparam>
            <typeparam name="TOut"></typeparam>
        </member>
        <member name="M:MySimpleServiceClient.HttpWebRequestHelper`2.SendHttpRequest(System.String,`0)">
            <summary>
            同步调用服务
            </summary>
            <param name="url"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:MySimpleServiceClient.HttpWebRequestHelper`2.SendHttpRequestAsync(System.String,`0,System.Action{`0,`1,System.Exception,System.Object},System.Object)">
            <summary>
            异步调用服务
            </summary>
            <param name="url"></param>
            <param name="input"></param>
            <param name="callback">服务调用完成后的回调委托，用于处理调用结果</param>
            <param name="state"></param>
        </member>
        <member name="T:MySimpleServiceClient.HttpWebRequestHelper`2.MyCallbackParam">
            <summary>
            用于所有回调状态的数据类
            </summary>
        </member>
    </members>
</doc>
