using System;
using System.Configuration;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Compilation;
using System.IO;
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Text;
using System.Xml;
using System.Web.Hosting;
namespace EntityBuildProvider
{
    /// <summary>
    ///Class1 的摘要说明
    /// </summary>
    public class OrmBuildProvider : BuildProvider
    {
        public override void GenerateCode(AssemblyBuilder assemblyBuilder)
        {
            TextWriter writer = assemblyBuilder.CreateCodeFile(this);
            if (writer == null)
            {
                return;
            }
            try
            {
                String code = ParseFileAndCreateCode(base.VirtualPath);
                writer.Write(code);
            }
            finally
            {
                writer.Close();
            }
        }
        private string ParseFileAndCreateCode(string fileName)
        {
            OrmDescriptor desc = ExtractInfo(fileName);
            //OrmDescriptor desc = new OrmDescriptor();
            StringBuilder code = new StringBuilder();
            // add some file header
            code.AppendLine("/////////////////////////////////////////////////////////");
            code.AppendLine("//  This file generated automatically. DO NOT change anything.");
            code.AppendLine("//  Because your change maybe dispeared when the application restarted.");
            code.AppendLine("//  Generated by OrmBuildProvider " + System.DateTime.Now.ToString());
            code.AppendLine("//  Implemented by Duchangyu     changyudu@163.com");
            code.AppendLine("////////////////////////////////////////////////////////");

            code.AppendLine("using System.Collections.Generic;");
            code.AppendLine();
            //code.AppendLine("namespace " + desc.NameSpace);
            //code.AppendLine("{");
            //add a class present the table
            for (int i = 0; i < desc.Descriptors.Length; i++)
            {
                OrmTableDescriptor t = desc.Descriptors[i];

                //add a comment here
                code.AppendLine("///----------" + t.ClassName + "   Class-----------");

                code.AppendLine("   public class " + t.ClassName);
                code.AppendLine("   {");

                //add the properties present the table columns
                DataAdapter adapter = CreateDataAdapter(t.DatabaseType, t.SelectCommand, t.ConnectionString);

                DataSet ds = new DataSet();
                adapter.FillSchema(ds, SchemaType.Mapped);
                DataTable dt = ds.Tables[0];
                for (int j = 0; j < dt.Columns.Count; j++)
                {
                    DataColumn column = dt.Columns[j];
                    string colName = column.ColumnName;
                    Type colType = column.DataType;
                    string filedName = "_" + colName.ToLower();

                    code.AppendLine("     private " + colType.ToString() + " " + filedName + ";");
                    code.AppendLine("     public " + colType.ToString() + " " + colName);
                    code.AppendLine("     {");
                    code.AppendLine("         set{ " + filedName + " = value;}");
                    code.AppendLine("         get{ return " + filedName + ";}");
                    code.AppendLine("     }");
                    code.AppendLine();
                }

                code.AppendLine("   }");
                code.AppendLine();

                //add the collectionClass--generic
                if (t.AllowCollectionClass)
                {
                    code.AppendLine("  public class " + t.CollectionClassName + ": List<" + t.ClassName + "> ");
                    code.AppendLine("  { }");
                    code.AppendLine();
                }
            }

            //code.AppendLine("}");

            return code.ToString();
        }

        private DataAdapter CreateDataAdapter(string type, string selectCommand, string connectionString)
        {
            SqlConnection conn = new SqlConnection(connectionString);

            SqlDataAdapter da = new SqlDataAdapter(selectCommand, conn);
            return da;

        }
        public OrmDescriptor ExtractInfo(string fileName)
        {
            //load the *.map document
            XmlDocument doc = new XmlDocument();
            using (Stream stream = VirtualPathProvider.OpenFile(fileName))
            {
                doc.Load(stream);
            }

            //get the namespace information
            XmlNode root = doc.DocumentElement;
            //string ns = root.Attributes["namespace"].Value;

            //visite the <mapping nodes>
            XmlNodeList mappings = doc.SelectNodes("Mappings/Mapping");
            OrmTableDescriptor[] descriptors = new OrmTableDescriptor[mappings.Count]; //allocate resource;
            //List<OrmTableDescriptor> descriptors = new List<OrmTableDescriptor>(mappings.Count);
            for (int i = 0; i < mappings.Count; i++)
            {
                XmlNode mapping = mappings[i];

                OrmTableDescriptor desc = new OrmTableDescriptor();
                desc.ConnectionString = mapping.Attributes["connectionString"].Value;
                desc.TableName = mapping.Attributes["tableName"].Value;
                desc.ClassName = mapping.Attributes["className"].Value;
                desc.SelectCommand = mapping.Attributes["selectCommand"].Value;
                bool allowPartialClass;
                bool.TryParse(mapping.Attributes["allowPartialClass"].Value, out allowPartialClass);
                desc.AllowPartialClass = allowPartialClass;
                bool allowCollection = false;
                Boolean.TryParse(mapping.Attributes["allowCollectionClass"].Value, out allowCollection);
                desc.AllowCollectionClass = allowCollection;
                if (allowCollection)
                {
                    desc.CollectionClassName = mapping.Attributes["collectionClassName"].Value;
                }
                desc.DatabaseType = mapping.Attributes["databaseType"].Value;

                descriptors[i] = desc;
                //descriptors.Add(desc);
            }

            //pack all info and return
            OrmDescriptor ormDescriptor = new OrmDescriptor();
            //ormDescriptor.NameSpace = ns;
            ormDescriptor.Descriptors = descriptors;
            return ormDescriptor;

        }
        public class OrmTableDescriptor
        {
            private string connectionString;

            public string ConnectionString
            {
                get { return connectionString; }
                set { connectionString = value; }
            }

            private string tableName;

            public string TableName
            {
                get { return tableName; }
                set { tableName = value; }
            }

            private string className;

            public string ClassName
            {
                get { return className; }
                set { className = value; }
            }

            private string selectCommand;

            public string SelectCommand
            {
                get { return selectCommand; }
                set { selectCommand = value; }
            }

            private bool allowPartialClass;

            public bool AllowPartialClass
            {
                get { return allowPartialClass; }
                set { allowPartialClass = value; }
            }

            private bool allowCollectionClass;

            public bool AllowCollectionClass
            {
                get { return allowCollectionClass; }
                set { allowCollectionClass = value; }
            }

            private string collectionClassName;

            public string CollectionClassName
            {
                get { return collectionClassName; }
                set { collectionClassName = value; }
            }

            private string databaseType;

            public string DatabaseType
            {
                get { return databaseType; }
                set { databaseType = value; }
            }
        }
        public class OrmDescriptor
        {
            private string nameSpace;

            //public string NameSpace
            //{
            //    get { return nameSpace; }
            //    set { nameSpace = value; }
            //}
            private OrmTableDescriptor[] descriptors;

            public OrmTableDescriptor[] Descriptors
            {
                get { return descriptors; }
                set { descriptors = value; }
            }

            //private List<OrmTableDescriptor> descriptors;

            //internal List<OrmTableDescriptor> Descriptors
            //{
            //    get { return descriptors; }
            //    set { descriptors = value; }
            //}

        }

    }
}