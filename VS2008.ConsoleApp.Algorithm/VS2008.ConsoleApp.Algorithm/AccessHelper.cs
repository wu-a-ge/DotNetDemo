using System;
using System.Data;
using System.Data.Common;
using System.Xml;
using System.Data.OleDb;
using System.Collections;

namespace VS2008.ConsoleApp.Algorithm
{
   public  sealed class AccessHelper:DBHelper
   {
       #region 私有成员
       /// <summary>
       /// 私有构造函数
       /// </summary>
       private AccessHelper() { }
       #endregion



       #region 针对OleDb的处理 ExecuteNonQuery

       /// <summary>
       /// Execute a SqlCommand (that returns no resultset and takes no parameters) against the database specified in 
       /// the connection string
       /// </summary>
       /// <remarks>
       /// e.g.:  
       ///  int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
       /// </remarks>
       /// <param name="connectionString">A valid connection string for a SqlConnection</param>
       /// <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
       /// <param name="commandText">The stored procedure name or T-SQL command</param>
       /// <returns>An int representing the number of rows affected by the command</returns>
       public static int ExecuteNonQuery(string connectionString, CommandType commandType, string commandText)
       {
           // Pass through the call providing null for the set of SqlParameters
           return ExecuteNonQuery(connectionString, commandType, commandText, (OleDbParameter[])null);
       }

       /// <summary>
       /// Execute a SqlCommand (that returns no resultset) against the database specified in the connection string 
       /// using the provided parameters
       /// </summary>
       /// <remarks>
       /// e.g.:  
       ///  int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
       /// </remarks>
       /// <param name="connectionString">A valid connection string for a SqlConnection</param>
       /// <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
       /// <param name="commandText">The stored procedure name or T-SQL command</param>
       /// <param name="commandParameters">An array of SqlParamters used to execute the command</param>
       /// <returns>An int representing the number of rows affected by the command</returns>
       public static int ExecuteNonQuery(string connectionString, CommandType commandType, string commandText, params OleDbParameter[] commandParameters)
       {
           if (connectionString == null || connectionString.Length == 0) throw new ArgumentNullException("connectionString");

           // Create & open a SqlConnection, and dispose of it after we are done
           using (OleDbConnection connection = new OleDbConnection(connectionString))
           {
               connection.Open();

               // Call the overload that takes a connection in place of the connection string
               return ExecuteNonQuery(connection, commandType, commandText, commandParameters);
           }
       }
       #endregion

       #region 针对OleDb的处理 SqlDataReader
       /// <summary>
       /// Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
       /// the connection string. 
       /// </summary>
       /// <remarks>
       /// e.g.:  
       ///  SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
       /// </remarks>
       /// <param name="connectionString">A valid connection string for a SqlConnection</param>
       /// <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
       /// <param name="commandText">The stored procedure name or T-SQL command</param>
       /// <returns>A SqlDataReader containing the resultset generated by the command</returns>
       public static OleDbDataReader ExecuteReader(string connectionString, CommandType commandType, string commandText)
       {
           // Pass through the call providing null for the set of SqlParameters
           return ExecuteReader(connectionString, commandType, commandText, (OleDbParameter[])null);
       }

       /// <summary>
       /// Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
       /// using the provided parameters.
       /// </summary>
       /// <remarks>
       /// e.g.:  
       ///  SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
       /// </remarks>
       /// <param name="connectionString">A valid connection string for a SqlConnection</param>
       /// <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
       /// <param name="commandText">The stored procedure name or T-SQL command</param>
       /// <param name="commandParameters">An array of SqlParamters used to execute the command</param>
       /// <returns>A SqlDataReader containing the resultset generated by the command</returns>
       public static OleDbDataReader ExecuteReader(string connectionString, CommandType commandType, string commandText, params OleDbParameter[] commandParameters)
       {
           if (connectionString == null || connectionString.Length == 0) throw new ArgumentNullException("connectionString");
           OleDbConnection connection = null;
           try
           {
               connection = new OleDbConnection(connectionString);
               connection.Open();

               // Call the private overload that takes an internally owned connection in place of the connection string
               return (OleDbDataReader)ExecuteReader(connection, null, commandType, commandText, commandParameters, DbConnectionOwnership.Internal);
           }
           catch
           {
               // If we fail to return the SqlDatReader, we need to close the connection ourselves
               if (connection != null) connection.Close();
               throw;
           }

       }
     

       #endregion

       #region   针对OleDb的处理ExecuteScalar

       /// <summary>
       /// Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
       /// the connection string. 
       /// </summary>
       /// <remarks>
       /// e.g.:  
       ///  int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
       /// </remarks>
       /// <param name="connectionString">A valid connection string for a SqlConnection</param>
       /// <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
       /// <param name="commandText">The stored procedure name or T-SQL command</param>
       /// <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
       public static object ExecuteScalar(string connectionString, CommandType commandType, string commandText)
       {
           // Pass through the call providing null for the set of SqlParameters
           return ExecuteScalar(connectionString, commandType, commandText, (OleDbParameter[])null);
       }

       /// <summary>
       /// Execute a SqlCommand (that returns a 1x1 resultset) against the database specified in the connection string 
       /// using the provided parameters.
       /// </summary>
       /// <remarks>
       /// e.g.:  
       ///  int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
       /// </remarks>
       /// <param name="connectionString">A valid connection string for a SqlConnection</param>
       /// <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
       /// <param name="commandText">The stored procedure name or T-SQL command</param>
       /// <param name="commandParameters">An array of SqlParamters used to execute the command</param>
       /// <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
       public static object ExecuteScalar(string connectionString, CommandType commandType, string commandText, params OleDbParameter[] commandParameters)
       {
           if (connectionString == null || connectionString.Length == 0) throw new ArgumentNullException("connectionString");
           // Create & open a SqlConnection, and dispose of it after we are done
           using (OleDbConnection connection = new OleDbConnection(connectionString))
           {
               connection.Open();

               // Call the overload that takes a connection in place of the connection string
               return ExecuteScalar(connection, commandType, commandText, commandParameters);
           }
       }

      
       #endregion

       #region 针对OleDb的处理 ExecuteDataset

       /// <summary>
       /// Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
       /// the connection string. 
       /// </summary>
       /// <remarks>
       /// e.g.:  
       ///  DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
       /// </remarks>
       /// <param name="connectionString">A valid connection string for a SqlConnection</param>
       /// <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
       /// <param name="commandText">The stored procedure name or T-SQL command</param>
       /// <returns>A dataset containing the resultset generated by the command</returns>
       public static DataSet ExecuteDataset(string connectionString, CommandType commandType, string commandText)
       {
           // Pass through the call providing null for the set of SqlParameters
           return ExecuteDataset(connectionString, commandType, commandText, (OleDbParameter[])null);
       }

       /// <summary>
       /// Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
       /// using the provided parameters.
       /// </summary>
       /// <remarks>
       /// e.g.:  
       ///  DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
       /// </remarks>
       /// <param name="connectionString">A valid connection string for a SqlConnection</param>
       /// <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
       /// <param name="commandText">The stored procedure name or T-SQL command</param>
       /// <param name="commandParameters">An array of SqlParamters used to execute the command</param>
       /// <returns>A dataset containing the resultset generated by the command</returns>
       public static DataSet ExecuteDataset(string connectionString, CommandType commandType, string commandText, params OleDbParameter[] commandParameters)
       {
           if (connectionString == null || connectionString.Length == 0) throw new ArgumentNullException("connectionString");

           // Create & open a SqlConnection, and dispose of it after we are done
           using (OleDbConnection connection = new OleDbConnection(connectionString))
           {
               connection.Open();

               // Call the overload that takes a connection in place of the connection string
               return ExecuteDataset(connection, commandType, commandText, commandParameters);
           }
       }
       /// <summary>
       /// Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
       /// </summary>
       /// <remarks>
       /// e.g.:  
       ///  DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
       /// </remarks>
       /// <param name="connection">A valid SqlConnection</param>
       /// <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
       /// <param name="commandText">The stored procedure name or T-SQL command</param>
       /// <returns>A dataset containing the resultset generated by the command</returns>
       public static DataSet ExecuteDataset(OleDbConnection connection, CommandType commandType, string commandText)
       {
           // Pass through the call providing null for the set of SqlParameters
           return ExecuteDataset(connection, commandType, commandText, (OleDbParameter[])null);
       }

       /// <summary>
       /// Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
       /// using the provided parameters.
       /// </summary>
       /// <remarks>
       /// e.g.:  
       ///  DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
       /// </remarks>
       /// <param name="connection">A valid SqlConnection</param>
       /// <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
       /// <param name="commandText">The stored procedure name or T-SQL command</param>
       /// <param name="commandParameters">An array of SqlParamters used to execute the command</param>
       /// <returns>A dataset containing the resultset generated by the command</returns>
       public static DataSet ExecuteDataset(OleDbConnection connection, CommandType commandType, string commandText, params OleDbParameter[] commandParameters)
       {
           if (connection == null) throw new ArgumentNullException("connection");

           // Create a command and prepare it for execution
           OleDbCommand cmd = new OleDbCommand();
           bool mustCloseConnection = false;
           PrepareCommand(cmd, connection, (OleDbTransaction)null, commandType, commandText, commandParameters, out mustCloseConnection);
           // Create the DataAdapter & DataSet
           using (OleDbDataAdapter da = new OleDbDataAdapter(cmd))
           {

               DataSet ds = new DataSet();

               // Fill the DataSet using default values for DataTable names, etc
               da.Fill(ds);

               // Detach the SqlParameters from the command object, so they can be used again
               cmd.Parameters.Clear();

               if (mustCloseConnection)
                   connection.Close();

               // Return the dataset
               return ds;
           }
       }

    
       /// <summary>
       /// Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
       /// </summary>
       /// <remarks>
       /// e.g.:  
       ///  DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
       /// </remarks>
       /// <param name="transaction">A valid SqlTransaction</param>
       /// <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
       /// <param name="commandText">The stored procedure name or T-SQL command</param>
       /// <returns>A dataset containing the resultset generated by the command</returns>
       public static DataSet ExecuteDataset(OleDbTransaction transaction, CommandType commandType, string commandText)
       {
           // Pass through the call providing null for the set of SqlParameters
           return ExecuteDataset(transaction, commandType, commandText, (OleDbParameter[])null);
       }

       /// <summary>
       /// Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
       /// using the provided parameters.
       /// </summary>
       /// <remarks>
       /// e.g.:  
       ///  DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
       /// </remarks>
       /// <param name="transaction">A valid SqlTransaction</param>
       /// <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
       /// <param name="commandText">The stored procedure name or T-SQL command</param>
       /// <param name="commandParameters">An array of SqlParamters used to execute the command</param>
       /// <returns>A dataset containing the resultset generated by the command</returns>
       public static DataSet ExecuteDataset(OleDbTransaction transaction, CommandType commandType, string commandText, params OleDbParameter[] commandParameters)
       {
           if (transaction == null) throw new ArgumentNullException("transaction");
           if (transaction != null && transaction.Connection == null) throw new ArgumentException("The transaction was rollbacked or commited, please provide an open transaction.", "transaction");

           // Create a command and prepare it for execution
           OleDbCommand cmd = transaction.Connection.CreateCommand();
           bool mustCloseConnection = false;
           PrepareCommand(cmd, transaction.Connection, transaction, commandType, commandText, commandParameters, out mustCloseConnection);

           // Create the DataAdapter & DataSet
           using (OleDbDataAdapter da = new OleDbDataAdapter(cmd))
           {

               DataSet ds = new DataSet();

               // Fill the DataSet using default values for DataTable names, etc
               da.Fill(ds);

               // Detach the SqlParameters from the command object, so they can be used again
               cmd.Parameters.Clear();

               // Return the dataset
               return ds;
           }
       }

       #endregion

       #region 针对OleDb的处理 FillDataset
       /// <summary>
       /// Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
       /// the connection string. 
       /// </summary>
       /// <remarks>
       /// e.g.:  
       ///  FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
       /// </remarks>
       /// <param name="connectionString">A valid connection string for a SqlConnection</param>
       /// <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
       /// <param name="commandText">The stored procedure name or T-SQL command</param>
       /// <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
       /// <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
       /// by a user defined name (probably the actual table name)</param>
       public static void FillDataset(string connectionString, CommandType commandType, string commandText, DataSet dataSet, string[] tableNames)
       {
           if (connectionString == null || connectionString.Length == 0) throw new ArgumentNullException("connectionString");
           if (dataSet == null) throw new ArgumentNullException("dataSet");

           // Create & open a SqlConnection, and dispose of it after we are done
           using (OleDbConnection connection = new OleDbConnection(connectionString))
           {
               connection.Open();

               // Call the overload that takes a connection in place of the connection string
               FillDataset(connection, commandType, commandText, dataSet, tableNames);
           }
       }

       /// <summary>
       /// Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
       /// using the provided parameters.
       /// </summary>
       /// <remarks>
       /// e.g.:  
       ///  FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
       /// </remarks>
       /// <param name="connectionString">A valid connection string for a SqlConnection</param>
       /// <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
       /// <param name="commandText">The stored procedure name or T-SQL command</param>
       /// <param name="commandParameters">An array of SqlParamters used to execute the command</param>
       /// <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
       /// <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
       /// by a user defined name (probably the actual table name)
       /// </param>
       public static void FillDataset(string connectionString, CommandType commandType,
           string commandText, DataSet dataSet, string[] tableNames,
           params OleDbParameter[] commandParameters)
       {
           if (connectionString == null || connectionString.Length == 0) throw new ArgumentNullException("connectionString");
           if (dataSet == null) throw new ArgumentNullException("dataSet");
           // Create & open a SqlConnection, and dispose of it after we are done
           using (OleDbConnection connection = new OleDbConnection(connectionString))
           {
               connection.Open();

               // Call the overload that takes a connection in place of the connection string
               FillDataset(connection, commandType, commandText, dataSet, tableNames, commandParameters);
           }
       }
  
       /// <summary>
       /// Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
       /// </summary>
       /// <remarks>
       /// e.g.:  
       ///  FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
       /// </remarks>
       /// <param name="connection">A valid SqlConnection</param>
       /// <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
       /// <param name="commandText">The stored procedure name or T-SQL command</param>
       /// <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
       /// <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
       /// by a user defined name (probably the actual table name)
       /// </param>    
       public static void FillDataset(OleDbConnection connection, CommandType commandType,
           string commandText, DataSet dataSet, string[] tableNames)
       {
           FillDataset(connection, commandType, commandText, dataSet, tableNames, null);
       }

       /// <summary>
       /// Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
       /// using the provided parameters.
       /// </summary>
       /// <remarks>
       /// e.g.:  
       ///  FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
       /// </remarks>
       /// <param name="connection">A valid SqlConnection</param>
       /// <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
       /// <param name="commandText">The stored procedure name or T-SQL command</param>
       /// <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
       /// <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
       /// by a user defined name (probably the actual table name)
       /// </param>
       /// <param name="commandParameters">An array of SqlParamters used to execute the command</param>
       public static void FillDataset(OleDbConnection connection, CommandType commandType,
           string commandText, DataSet dataSet, string[] tableNames,
           params OleDbParameter[] commandParameters)
       {
           FillDataset(connection, null, commandType, commandText, dataSet, tableNames, commandParameters);
       }
   
       /// <summary>
       /// Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
       /// </summary>
       /// <remarks>
       /// e.g.:  
       ///  FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
       /// </remarks>
       /// <param name="transaction">A valid SqlTransaction</param>
       /// <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
       /// <param name="commandText">The stored procedure name or T-SQL command</param>
       /// <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
       /// <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
       /// by a user defined name (probably the actual table name)
       /// </param>
       public static void FillDataset(OleDbTransaction transaction, CommandType commandType,
           string commandText,
           DataSet dataSet, string[] tableNames)
       {
           FillDataset(transaction, commandType, commandText, dataSet, tableNames, null);
       }

       /// <summary>
       /// Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
       /// using the provided parameters.
       /// </summary>
       /// <remarks>
       /// e.g.:  
       ///  FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
       /// </remarks>
       /// <param name="transaction">A valid SqlTransaction</param>
       /// <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
       /// <param name="commandText">The stored procedure name or T-SQL command</param>
       /// <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
       /// <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
       /// by a user defined name (probably the actual table name)
       /// </param>
       /// <param name="commandParameters">An array of SqlParamters used to execute the command</param>
       public static void FillDataset(OleDbTransaction transaction, CommandType commandType,
           string commandText, DataSet dataSet, string[] tableNames,
           params OleDbParameter[] commandParameters)
       {
           FillDataset(transaction.Connection, transaction, commandType, commandText, dataSet, tableNames, commandParameters);
       }
       /// <summary>
       /// Private helper method that execute a SqlCommand (that returns a resultset) against the specified SqlTransaction and SqlConnection
       /// using the provided parameters.
       /// </summary>
       /// <remarks>
       /// e.g.:  
       ///  FillDataset(conn, trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
       /// </remarks>
       /// <param name="connection">A valid SqlConnection</param>
       /// <param name="transaction">A valid SqlTransaction</param>
       /// <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
       /// <param name="commandText">The stored procedure name or T-SQL command</param>
       /// <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
       /// <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
       /// by a user defined name (probably the actual table name)
       /// </param>
       /// <param name="commandParameters">An array of SqlParamters used to execute the command</param>
       private static void FillDataset(OleDbConnection connection, OleDbTransaction transaction, CommandType commandType,
           string commandText, DataSet dataSet, string[] tableNames,
           params OleDbParameter[] commandParameters)
       {
           if (connection == null) throw new ArgumentNullException("connection");
           if (dataSet == null) throw new ArgumentNullException("dataSet");

           // Create a command and prepare it for execution
           OleDbCommand command = new OleDbCommand();
           bool mustCloseConnection = false;
           PrepareCommand(command, connection, transaction, commandType, commandText, commandParameters, out mustCloseConnection);

           // Create the DataAdapter & DataSet
           using (OleDbDataAdapter dataAdapter = new OleDbDataAdapter(command))
           {

               // Add the table mappings specified by the user
               if (tableNames != null && tableNames.Length > 0)
               {
                   string tableName = "Table";
                   for (int index = 0; index < tableNames.Length; index++)
                   {
                       if (tableNames[index] == null || tableNames[index].Length == 0) throw new ArgumentException("The tableNames parameter must contain a list of tables, a value was provided as null or empty string.", "tableNames");
                       dataAdapter.TableMappings.Add(tableName, tableNames[index]);
                       tableName += (index + 1).ToString();
                   }
               }

               // Fill the DataSet using default values for DataTable names, etc
               dataAdapter.Fill(dataSet);

               // Detach the SqlParameters from the command object, so they can be used again
               command.Parameters.Clear();
           }

           if (mustCloseConnection)
               connection.Close();
       }
       #endregion

       #region 针对OleDb UpdateDataset
       /// <summary>
       /// Executes the respective command for each inserted, updated, or deleted row in the DataSet.
       /// </summary>
       /// <remarks>
       /// e.g.:  
       ///  UpdateDataset(conn, insertCommand, deleteCommand, updateCommand, dataSet, "Order");
       /// </remarks>
       /// <param name="insertCommand">A valid transact-SQL statement or stored procedure to insert new records into the data source</param>
       /// <param name="deleteCommand">A valid transact-SQL statement or stored procedure to delete records from the data source</param>
       /// <param name="updateCommand">A valid transact-SQL statement or stored procedure used to update records in the data source</param>
       /// <param name="dataSet">The DataSet used to update the data source</param>
       /// <param name="tableName">The DataTable used to update the data source.</param>
       public static void UpdateDataset(OleDbCommand insertCommand, OleDbCommand deleteCommand, OleDbCommand updateCommand, DataSet dataSet, string tableName)
       {
           if (insertCommand == null) throw new ArgumentNullException("insertCommand");
           if (deleteCommand == null) throw new ArgumentNullException("deleteCommand");
           if (updateCommand == null) throw new ArgumentNullException("updateCommand");
           if (tableName == null || tableName.Length == 0) throw new ArgumentNullException("tableName");

           // Create a SqlDataAdapter, and dispose of it after we are done
           using (OleDbDataAdapter dataAdapter = new OleDbDataAdapter())
           {
               // Set the data adapter commands
               dataAdapter.UpdateCommand = updateCommand;
               dataAdapter.InsertCommand = insertCommand;
               dataAdapter.DeleteCommand = deleteCommand;

               // Update the dataset changes in the data source
               dataAdapter.Update(dataSet, tableName);

               // Commit all the changes made to the DataSet
               dataSet.AcceptChanges();
           }
       }
       #endregion
   }
}
